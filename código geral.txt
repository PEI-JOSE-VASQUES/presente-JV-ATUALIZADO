#include <Adafruit_Fingerprint.h>
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <time.h>
#include <IOXhop_FirebaseESP32.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // Display OLED largura em pixels
#define SCREEN_HEIGHT 64 // Display OLED altura em pixela 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);












const unsigned char epd_bitmap_Icone_Seguranca_Biometria__1_ [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x07, 0xe0, 0x00, 0x1f, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x80, 0x3c, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x07, 0x00, 0x0f, 0xff, 0xf0, 0x03, 0x80, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x1c, 0x01, 0xf0, 0x00, 0x1f, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x70, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x07, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc0, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x3c, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x83, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0x06, 0x01, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x07, 0x01, 0xc0, 0x0f, 0xff, 0xe0, 0x03, 0x83, 0x00, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x07, 0x07, 0x00, 0x78, 0x00, 0x3c, 0x01, 0xc3, 0x80, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x0e, 0x0e, 0x03, 0xc0, 0x00, 0x07, 0x80, 0xe1, 0xc0, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x70, 0xc0, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x0e, 0x03, 0xff, 0x80, 0x70, 0x38, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x1c, 0x18, 0x1c, 0x0e, 0x00, 0xe0, 0x30, 0x38, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x1c, 0x38, 0x38, 0x1c, 0x00, 0x70, 0x38, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x38, 0x38, 0x1c, 0x00, 0x38, 0x18, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x38, 0x38, 0x18, 0x18, 0x38, 0x18, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x38, 0x38, 0x18, 0x38, 0x38, 0x18, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x38, 0x38, 0x18, 0x38, 0x38, 0x18, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x38, 0x38, 0x18, 0x38, 0x38, 0x1c, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x38, 0x30, 0x18, 0x38, 0x38, 0x1c, 0x18, 0xe0, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x38, 0x30, 0x18, 0x38, 0x38, 0x1c, 0x18, 0x70, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x38, 0x30, 0x18, 0x38, 0x38, 0x1c, 0x18, 0x1f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x00, 0x30, 0x18, 0x38, 0x38, 0x1c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x38, 0x38, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x38, 0x38, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x1c, 0x38, 0x38, 0x18, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x18, 0x1c, 0x38, 0x1c, 0x1c, 0x70, 0x18, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x18, 0x1c, 0x0f, 0xc0, 0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x1c, 0x0c, 0x1c, 0x0e, 0x00, 0x00, 0x70, 0x70, 0x38, 0x38, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x1c, 0x0e, 0x0e, 0x03, 0x80, 0x01, 0xc0, 0xe0, 0x30, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x0e, 0x06, 0x07, 0x00, 0xf0, 0x0f, 0x01, 0xc0, 0x7f, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x0e, 0x07, 0x01, 0xc0, 0x0f, 0xf8, 0x07, 0x81, 0xe0, 0x03, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x07, 0x03, 0x80, 0x70, 0x00, 0x00, 0x1e, 0x0e, 0x00, 0x00, 0x3c, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x03, 0x81, 0xc0, 0x1e, 0x00, 0x00, 0xf0, 0x38, 0x00, 0x00, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x81, 0xc0, 0x70, 0x01, 0xff, 0xff, 0x00, 0xe0, 0x00, 0x00, 0x03, 0x80, 0x00, 
  0x00, 0x00, 0x01, 0xc0, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x01, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x38, 0x0f, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x0e, 0x01, 0xc0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0xc0, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x3e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x07, 0x00, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x0e, 0x00, 0xf0, 0x01, 0xff, 0xff, 0xc7, 0x00, 0x00, 0x1c, 0x00, 0x30, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x80, 0x1e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xe0, 0x00, 0x00, 0x1f, 0x00, 0xf1, 0xc0, 0x00, 0x70, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x1f, 0xff, 0xff, 0xe3, 0x80, 0x1f, 0x00, 0x00, 0x60, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x01, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x07, 0x80, 0x00, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN1 = 1;
const unsigned char* epd_bitmap_allArray1[1] = {
  epd_bitmap_Icone_Seguranca_Biometria__1_
};




const unsigned char epd_bitmap_nega [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0xff, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x03, 0xf0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0xff, 0xf8, 0x00, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x3f, 0xff, 0xff, 0xc0, 0x0f, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0x81, 0xfc, 0x00, 0x03, 0xf8, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0x07, 0xc0, 0x00, 0x00, 0x1f, 0x01, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0xff, 0xfc, 0x03, 0xc0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x78, 0x0f, 0xff, 0xff, 0xc0, 0xf0, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0xf0, 0x7e, 0x00, 0x03, 0xf0, 0x78, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc1, 0xc1, 0xf0, 0x00, 0x00, 0x7c, 0x1e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x83, 0x87, 0xc0, 0xff, 0xf8, 0x0f, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x0f, 0x0f, 0x07, 0xf0, 0x7f, 0x07, 0x87, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x1e, 0x1f, 0x00, 0x07, 0xc3, 0xc3, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x00, 0x01, 0xe1, 0xe1, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf0, 0x78, 0x70, 0x7f, 0xf0, 0xf0, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc1, 0xf0, 0xe0, 0xf0, 0x78, 0x78, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xc1, 0xe1, 0xc0, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x03, 0xc3, 0x87, 0x0e, 0x38, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x0f, 0x07, 0x0f, 0x0e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xe0, 0x3e, 0x0e, 0x0e, 0x1c, 0x38, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x80, 0xf8, 0x3c, 0x1c, 0x3c, 0x30, 0x06, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0xf8, 0x78, 0x78, 0x60, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0x83, 0xe0, 0xf0, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7c, 0x07, 0x83, 0xe1, 0xe0, 0x01, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x1e, 0x0f, 0x83, 0xc0, 0x02, 0x00, 0x00, 0x0e, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x0f, 0x00, 0x04, 0x07, 0xc0, 0x3c, 0x00, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xe0, 0xf8, 0x3e, 0x00, 0x0c, 0x01, 0xf0, 0xf8, 0x00, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0x83, 0xe0, 0x78, 0x0e, 0x08, 0x00, 0x3f, 0xe0, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x0f, 0x81, 0xe0, 0x0e, 0x08, 0x00, 0x0f, 0xc0, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x07, 0x80, 0x1c, 0x08, 0x00, 0x0b, 0xf0, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x1e, 0x00, 0x1e, 0x0c, 0x00, 0x3c, 0x3c, 0x00, 0x40, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xc0, 0x78, 0x00, 0x0e, 0x0c, 0x00, 0xf8, 0x0f, 0x80, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x3e, 0x0e, 0x06, 0x01, 0xe0, 0x01, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x81, 0xff, 0x87, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x07, 0xc3, 0xc7, 0x80, 0xc0, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x01, 0xe3, 0xc0, 0x30, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xe0, 0xf8, 0x0e, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x38, 0x00, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN2 = 1;
const unsigned char* epd_bitmap_allArray2[1] = {
  epd_bitmap_nega
};

// 'w', 128x64px
const unsigned char epd_bitmap_w [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 
  0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 
  0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 
  0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 
  0x1f, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xf8, 
  0x7f, 0xff, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xfe, 
  0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x1f, 0xff, 
  0x7f, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x07, 0xfe, 
  0x3f, 0x80, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xfc, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN3 = 1;
const unsigned char* epd_bitmap_allArray3[1] = {
  epd_bitmap_w
};

// 'wr', 128x40px
const unsigned char epd_bitmap_wr [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x60, 0x06, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x60, 0x06, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xe0, 0x07, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x60, 0x06, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x60, 0x06, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xe0, 0x07, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xf8, 0x1f, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 656)
const int epd_bitmap_allArray_LEN4 = 1;
const unsigned char* epd_bitmap_allArray4[1] = {
  epd_bitmap_wr
};

// 'wg', 128x64px
const unsigned char epd_bitmap_wg [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0x00, 0x7f, 0xfe, 0x00, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0xfe, 0x00, 0xff, 0xff, 0x00, 0x7e, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x07, 0xfc, 0x01, 0xff, 0xff, 0x80, 0x3f, 0xc0, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x1f, 0xf8, 0x03, 0xff, 0xff, 0xc0, 0x1f, 0xf8, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x7f, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x1f, 0xfe, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x01, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x07, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xf0, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xf8, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xfc, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xf8, 0x07, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xc0, 0x1f, 0xff, 
  0xff, 0xf8, 0x07, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xe0, 0x1f, 0xff, 
  0xff, 0xf0, 0x07, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xe0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x0f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xf0, 0x0f, 0xff, 
  0xff, 0xf0, 0x07, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xf8, 0x3f, 0xff, 
  0xff, 0xf8, 0x07, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xf8, 0x03, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x03, 0xff, 0xc0, 0x01, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0xff, 0xf8, 0x00, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0xff, 0xff, 0x00, 0x7f, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x3f, 0xff, 
  0xff, 0xff, 0x00, 0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xf8, 0x02, 0x00, 0x1f, 0xff, 0xc0, 0x1f, 0xff, 
  0xff, 0xff, 0x80, 0x1f, 0xff, 0xc0, 0x1f, 0xff, 0xf8, 0x07, 0x80, 0x07, 0xff, 0xe0, 0x1f, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0xff, 0xe0, 0x1f, 0xff, 0xf0, 0x0f, 0xe0, 0x01, 0xff, 0xf0, 0x0f, 0xff, 
  0xff, 0xff, 0xf0, 0x03, 0xff, 0xe0, 0x0f, 0xff, 0xf0, 0x0f, 0xf8, 0x00, 0x7f, 0xf0, 0x0f, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0xff, 0xf0, 0x0f, 0xff, 0xf0, 0x0f, 0xfe, 0x00, 0x1f, 0xf0, 0x0f, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x7f, 0xf8, 0x07, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x07, 0xf0, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xf8, 0x03, 0xff, 0xf8, 0x07, 0xff, 0xe0, 0x01, 0xe0, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x03, 0xfc, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xf8, 0x00, 0x40, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x7e, 0x00, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0x00, 0x7f, 0xfe, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0x80, 0x01, 0xff, 0x80, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN5 = 1;
const unsigned char* epd_bitmap_allArray5[1] = {
  epd_bitmap_wg
};

// 'LOGO CANVAS', 128x64px
const unsigned char epd_bitmap_LOGO_CANVAS [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x0f, 0xe7, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0x9f, 0xe7, 0xff, 0xff, 0xc3, 0xfc, 0x3f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0x9f, 0xe7, 0xff, 0xff, 0x0f, 0xfe, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xdf, 0xcf, 0xe0, 0xfe, 0x3f, 0xfc, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xdf, 0xcf, 0x80, 0x18, 0xff, 0xfc, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0x9f, 0xcf, 0x80, 0x03, 0xff, 0xfc, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0x9f, 0xcf, 0x00, 0x07, 0xff, 0xfe, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x3f, 0xef, 0x00, 0x0f, 0xc0, 0x7f, 0x1f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe7, 0x00, 0x1f, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x87, 0x00, 0x1c, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x07, 0x00, 0x30, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x03, 0x00, 0x20, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x03, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x7f, 0xfc, 0x7c, 0x0f, 0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xcf, 0xf0, 0xff, 0xfe, 0xfe, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe7, 0xf8, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf9, 0xfc, 0xff, 0xfd, 0xff, 0x3f, 0xe3, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f, 0x3f, 0xf1, 0xff, 0x3f, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0x9f, 0xc7, 0xf0, 0xff, 0x3f, 0xc0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xc7, 0xff, 0xf0, 0xff, 0xff, 0xc0, 0x3f, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0xff, 0xc1, 0xff, 0xf0, 0x7f, 0xff, 0x80, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0x3f, 0xc3, 0xff, 0xe0, 0x7f, 0xff, 0x80, 0x7f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0x9f, 0xc3, 0xff, 0xe0, 0x3f, 0xff, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xdf, 0xc3, 0xff, 0xe0, 0x1f, 0xff, 0x81, 0xfc, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xdf, 0xc1, 0xff, 0xc0, 0x0f, 0xff, 0xc7, 0xfd, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xdf, 0xc0, 0xff, 0x80, 0x03, 0xf3, 0xe7, 0xf9, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0x9f, 0xe0, 0x07, 0xc0, 0x18, 0x03, 0xf7, 0xfd, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xbf, 0xff, 0xff, 0x80, 0x18, 0x01, 0xfb, 0xfd, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7e, 0x7f, 0xff, 0xfe, 0x00, 0x38, 0x01, 0xf9, 0xfe, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x38, 0x00, 0xfd, 0xfe, 0x7f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x78, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x70, 0x00, 0x78, 0x01, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0xf8, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x01, 0xf7, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x07, 0xf7, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xef, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x3f, 0xff, 0xdf, 0xf8, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xff, 0xbf, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfb, 0xff, 0x7f, 0xdf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfd, 0xfe, 0xff, 0xdf, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfd, 0xfc, 0x7f, 0xbf, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0xf0, 0x1f, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN6 = 1;
const unsigned char* epd_bitmap_allArray6[1] = {
  epd_bitmap_LOGO_CANVAS
};

// 'Design sem nome', 128x64px
const unsigned char epd_bitmap_Design_sem_nome [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 0x3f, 
  0xf0, 0x1f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xfc, 0x3f, 
  0xc0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x80, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x9f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x9f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x9f, 0xff, 0xfe, 0x3f, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0x07, 
  0x9f, 0xff, 0xe0, 0x01, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0x07, 
  0x9f, 0xff, 0x00, 0x00, 0x7f, 0xfe, 0x3f, 0xff, 0xff, 0xf0, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x0f, 
  0x9f, 0xfc, 0x1f, 0xfc, 0x1f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 
  0x9f, 0xf8, 0x70, 0x07, 0x0f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 
  0x9f, 0xf1, 0xc0, 0x00, 0xc7, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf3, 0x07, 0xf0, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xfe, 0x1c, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xfc, 0x60, 0x03, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf8, 0xc1, 0xc0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf1, 0x8f, 0x38, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf3, 0x18, 0x06, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xfc, 0x1f, 0xfc, 0x3f, 
  0xff, 0xe2, 0x20, 0x03, 0x11, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfe, 0x3f, 0xf0, 0x07, 0xfc, 0x3f, 
  0xff, 0xe6, 0x43, 0xf1, 0x99, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfe, 0x1f, 0xe0, 0x01, 0xfc, 0x3f, 
  0xff, 0xc4, 0x46, 0x18, 0x88, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xfe, 0x1f, 0xc0, 0x00, 0xfc, 0x3f, 
  0xff, 0xcc, 0x8c, 0x04, 0x4c, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xfe, 0x1f, 0x81, 0xe0, 0x7c, 0x3f, 
  0xff, 0xec, 0x88, 0xc6, 0x44, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xfe, 0x1f, 0x07, 0xf0, 0x7c, 0x3f, 
  0xff, 0xf8, 0x99, 0xa2, 0x67, 0xff, 0xff, 0xff, 0xff, 0x01, 0xfe, 0x1f, 0x0f, 0xf8, 0x7c, 0x3f, 
  0xff, 0xf9, 0x99, 0x12, 0x27, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x1e, 0x0f, 0xff, 0xfc, 0x3f, 
  0xff, 0xf9, 0x91, 0x12, 0x26, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x7e, 0x1e, 0x1f, 0xff, 0x7c, 0x3f, 
  0xff, 0xe1, 0x11, 0x32, 0x24, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x7e, 0x1e, 0x0f, 0xfc, 0x3c, 0x3f, 
  0xff, 0xc3, 0x31, 0x22, 0x64, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x1c, 0x0f, 0xf8, 0x3c, 0x3f, 
  0xff, 0xce, 0x33, 0x22, 0x64, 0x7f, 0xff, 0xff, 0xff, 0x01, 0xff, 0x1e, 0x1f, 0xf8, 0x1c, 0x3f, 
  0xff, 0xf8, 0x62, 0x26, 0x44, 0x7f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0x0f, 0x3f, 0xf8, 0x3c, 0x3f, 
  0xff, 0xc0, 0xe6, 0x24, 0x44, 0x7f, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0x0f, 0xf7, 0xf8, 0x7c, 0x3f, 
  0xff, 0xc3, 0xc6, 0x44, 0xcc, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0x0f, 0xe3, 0xe0, 0x7c, 0x3f, 
  0xff, 0xff, 0x0c, 0x4c, 0xcc, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0x0f, 0xc0, 0x00, 0xfc, 0x3f, 
  0xff, 0xf0, 0x18, 0x88, 0x88, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0x0f, 0xc0, 0x01, 0xfc, 0x3f, 
  0xff, 0xe0, 0x71, 0x99, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xe0, 0x03, 0xfc, 0x3f, 
  0xff, 0xf3, 0xe3, 0x19, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf8, 0x0f, 0xfc, 0x3f, 
  0xff, 0xff, 0x06, 0x39, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf8, 0x0c, 0x79, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xf8, 0x38, 0xf8, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xfc, 0x3f, 
  0xff, 0xff, 0xc1, 0x8c, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0x02, 0x07, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0x18, 0x21, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0x30, 0xf0, 0x1f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0x23, 0x8c, 0x1f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0xe6, 0x03, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0xfc, 0x01, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0xf8, 0xf9, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x1f, 0xff, 0xfc, 0x3f, 
  0x9f, 0xff, 0xf9, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x3f, 
  0x80, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x3f, 
  0xc0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x3f, 
  0xf0, 0x1f, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7c, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int epd_bitmap_allArray_LEN7 = 1;
const unsigned char* epd_bitmap_allArray7[1] = {
  epd_bitmap_Design_sem_nome
};


  void tirar_digital() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_Design_sem_nome, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

  void logo() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_LOGO_CANVAS, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

 void wifi_globo() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_wg, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

 void wifi_ruim() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_wr, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

  void wifi_bom() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0,epd_bitmap_w , 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

  void aceita() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_Icone_Seguranca_Biometria__1_, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

  void nega() {
display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 8x30
display.clearDisplay(); //for Cleaning the display
display.drawBitmap(0, 0, epd_bitmap_nega, 128, 64, WHITE); // display.de
display.display();
delay(1000);
}

const char *ssid = "ISAQUE FLYCONECTA";
const char *passwordr = "paocaseiro";
const char *host = "jv-presente-default-rtdb.firebaseio.com";
const char *auth = "rzB4LE4Y7qGhTfKSL81GBO4rufRYSxs46VSF4nnI";

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "a.ntp.br", -3 * 3600, 60000);

int suaVariavelDeComparacao = 1;
String ultimoHorario = "";
bool horarioDefinido = false;
bool historicoDefinido = false;
int diaAtual;
int mesAtual;
int anoAtual;
String dataAtualFixa;

const uint32_t password = 0x0;
Adafruit_Fingerprint fingerprintSensor = Adafruit_Fingerprint(&Serial2, password);

void setup() {
  pinMode(2, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(23, OUTPUT);
  logo();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 0);
display.print("Turma JV");
display.display();

  Serial.begin(9600);
  Serial.println("Conectando ao WiFi...");
  WiFi.begin(ssid, passwordr);
  while (WiFi.status() != WL_CONNECTED) {
    digitalWrite(4,1);
    delay(250);
        digitalWrite(4,0);
    delay(250);
    Serial.print(".");
wifi_globo();
}
        digitalWrite(4,0);
        digitalWrite(2,1);
delay(250);
        digitalWrite(2,0);
delay(250);

wifi_bom();
  Serial.println("WiFi conectado");
  timeClient.begin();
  Firebase.begin(host, auth);
  setupFingerprintSensor();
}

void setupFingerprintSensor() {
  fingerprintSensor.begin(57600);
  if (!fingerprintSensor.verifyPassword()) {
    Serial.println(F("Não foi possível conectar ao sensor. Verifique a senha ou a conexão"));
    while (true);
  }
}
void printStoredFingerprintsCount();
void deleteFingerprint();
void emptyDatabase();

void loop() {
  printMenu();
logo();
  
  while(Firebase.getString("/ponto_geral/chaveT") == "ler"){
        checkFingerprint();
Serial.println("ler confirmado!");
}
while(Firebase.getString("/ponto_geral/chaveT") == "cadastrar"){
storeFingerprint();
Serial.println("cadastrar confirmado!");
}
while(Firebase.getString("/ponto_geral/chaveT") == "deletar"){
      deleteFingerprint();
Serial.println("deletar confirmado!");
}
while(Firebase.getString("/ponto_geral/chaveT") == "apagarG"){
      emptyDatabase();
Serial.println("deletar confirmado!");
}

 /*
  String command = getCommand();
  int i = command.toInt();

  switch (i) {
    case 1:
      storeFingerprint();
      break;
    case 2:
      checkFingerprint();
      break;
    case 3:
      printStoredFingerprintsCount();
      break;
    case 4:
      deleteFingerprint();
      break;
    case 5:
      emptyDatabase();
      break;
    default:
      Serial.println(F("Opção inválida"));
      break;
  
 }
 */
  delay(1);
}

void printMenu() {
  Serial.println();
  Serial.println(F("Digite um dos números do menu abaixo"));
  Serial.println(F("1 - Cadastrar digital"));
  Serial.println(F("2 - Verificar digital"));
  Serial.println(F("3 - Mostrar quantidade de digitais cadastradas"));
  Serial.println(F("4 - Apagar digital em uma posição"));
  Serial.println(F("5 - Apagar banco de digitais"));
}

String getCommand() {
  while (!Serial.available()) delay(10);
  return Serial.readStringUntil('\n');
}

void storeFingerprint() {
          digitalWrite(4,1);
  Serial.println(F("Qual a posição para guardar a digital? (1 a 149)"));
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
display.print("O sistema estrou no modo de cadastro!");
display.display();
display.setTextSize(1);
display.setCursor(0, 40);
display.print("Encoste o seu dedo no sensor");
display.display();
display.setTextSize(1);
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();
  //String strLocation = getCommand();
  int location = Firebase.getInt("/ponto_geral/adicionar");

  if (location < 1 || location > 149) {
    Serial.println(F("Posição inválida"));
    nega();
    digitalWrite(23,1);
    return;
  }
      digitalWrite(23,0);

  display.setTextSize(1);
display.setCursor(0, 40);
display.print("Encoste o seu dedo no sensor");
display.display();

  Serial.println(F("Encoste o dedo no sensor"));
  while (fingerprintSensor.getImage() != FINGERPRINT_OK);
  if (fingerprintSensor.image2Tz(1) != FINGERPRINT_OK) {
    Serial.println(F("Erro image2Tz 1"));
        nega();
    digitalWrite(23,1);
    return;
  }
      digitalWrite(23,0);

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 30);
display.print("Tire o dedo do sensor.");
display.display();
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();

  Serial.println(F("Tire o dedo do sensor"));
  delay(2000);
  while (fingerprintSensor.getImage() != FINGERPRINT_NOFINGER);
  Serial.println(F("Encoste o mesmo dedo no sensor"));
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 30);
display.print("Encoste o mesmo dedo no sensor!");
display.display();
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();
  while (fingerprintSensor.getImage() != FINGERPRINT_OK);
  if (fingerprintSensor.image2Tz(2) != FINGERPRINT_OK) {
    Serial.println(F("Erro image2Tz 2"));
        nega();
    digitalWrite(23,1);
            Firebase.setString("ponto_geral/confirmacao", "negado");
    return;
  }
      digitalWrite(23,0);digitalWrite(4,0);

  if (fingerprintSensor.createModel() != FINGERPRINT_OK) {
    Serial.println(F("Erro createModel"));
        digitalWrite(23,1);digitalWrite(4,0);
        nega();

            Firebase.setString("ponto_geral/confirmacao", "negado");
    return;
            digitalWrite(23,0);

  }
  if (fingerprintSensor.storeModel(location) != FINGERPRINT_OK) {
    Serial.println(F("Erro storeModel"));
        digitalWrite(23,1);digitalWrite(4,0);
        nega();

            Firebase.setString("ponto_geral/confirmacao", "negado");
            digitalWrite(23,0);digitalWrite(4,0);
    return;
            

  }
          digitalWrite(4,0);
                  digitalWrite(2,1);

  aceita();
            digitalWrite(4,0);

              display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
display.print("O aluno foi cadastrado no sistema!");
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();

        Firebase.setString("ponto_geral/confirmacao", "aceito");
        Firebase.setString("ponto_geral/chaveT", "ler");
  Serial.println(F("Sucesso!!!"));
          digitalWrite(2,0);
          

}

void checkFingerprint() {
   display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
display.print("Encoste o seu dedo indicador no sensor!");
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();

  Serial.println(F("Encoste o dedo no sensor"));
  while (fingerprintSensor.getImage() != FINGERPRINT_OK);
  if (fingerprintSensor.image2Tz() != FINGERPRINT_OK) {
    Serial.println(F("Erro image2Tz"));

    return;
  }
  if (fingerprintSensor.fingerFastSearch() != FINGERPRINT_OK) {
    Serial.println(F("Digital não encontrada"));
            digitalWrite(23,1);

       display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
display.print("Digital desconhecida!");
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();
delay(2000);
            digitalWrite(23,0);

    return;
  }
        digitalWrite(23,0);

  Serial.print(F("Digital encontrada com confiança de "));
  Serial.print(fingerprintSensor.confidence);
  Serial.print(F(" na posição "));
  Serial.println(fingerprintSensor.fingerID);


String ultimoHorario = ""; 
bool horarioDefinido = false; 
bool historicoDefinido = false; 


 
timeClient.update();
  String formattedTime = timeClient.getFormattedTime();
  Serial.println(formattedTime);
  
   display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
                digitalWrite(4,1);
display.print("Processando a digital.");
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();
  // Obtendo o horário atual
  time_t now = timeClient.getEpochTime();
  struct tm *timeinfo = localtime(&now);
  char horario[6]; // para armazenar "HH:MM"
  strftime(horario, sizeof(horario), "%H:%M", timeinfo);

  // Obtendo o dia, mês e ano atuais
  diaAtual = timeinfo->tm_mday;
  mesAtual = timeinfo->tm_mon + 1; // tm_mon começa de 0 (janeiro é 0)
  anoAtual = timeinfo->tm_year + 1900; // tm_year conta os anos desde 1900

  // Construindo dinamicamente o nome do nó que queremos verificar
      int suaVariavelDeComparacao = fingerprintSensor.fingerID;
  String alunoNode = "/ALUNOS-NA-ESCOLA/A" + String(suaVariavelDeComparacao);

  // Verificando se o nó existe no Firebase
  // Verificando se o nó existe no Firebase
  if (!Firebase.getBool(alunoNode + "/existe:")) {
    // Obtendo o nome do aluno correspondente ao número do aluno
    String nomeAluno = Firebase.getString("/ALUNOS-NO-SISTEMA/A" + String(suaVariavelDeComparacao) + "/Nome");
    String nomeRA = Firebase.getString("/ALUNOS-NO-SISTEMA/A" + String(suaVariavelDeComparacao) + "/Serie");
    String nomeSerie = Firebase.getString("/ALUNOS-NO-SISTEMA/A" + String(suaVariavelDeComparacao) + "/RA");

    // Verifica se o nó "horario:" já foi definido
    if (!horarioDefinido) {
      // Definindo o valor de "horario" apenas se for a primeira vez
      String horarioString = String(horario);
      Firebase.setString("ALUNOS-NA-ESCOLA/" + nomeAluno + "/horario:", horarioString);

      // Registrando a adição do nó com o nome do aluno
      Serial.print("Nó adicionado com sucesso para o aluno ");
      Serial.println(nomeAluno);
      Serial.println("RA: " + nomeRA);
      Serial.println("Serie: " + nomeSerie);
      Serial.println("Horário: " + horarioString);

      // Atualizando o último horário registrado
      ultimoHorario = horarioString;
      horarioDefinido = true;
    }

    // Definindo que o nó existe no Firebase
    Firebase.setBool("ALUNOS-NA-ESCOLA/" + nomeAluno + "/existe:", true);
    Firebase.setString("ALUNOS-NA-ESCOLA/" + nomeAluno + "/RA:", nomeRA);
    Firebase.setString("ALUNOS-NA-ESCOLA/" + nomeAluno + "/Serie:", nomeSerie);

    // Verificando se o nó "Historico" já foi definido
    if (!historicoDefinido) {
      // Definindo o nó de histórico apenas se for a primeira vez
      Firebase.setString("Historico/", ""); // Criar o nó "Historico"
      historicoDefinido = true;
    }

    // Verifica se a data atual fixa já foi definida
    if (dataAtualFixa == "") {
      // Constrói a string fixa da data atual
      dataAtualFixa = String(diaAtual) + "-" + String(mesAtual) + "-" + String(anoAtual);

      // Verifica se a data atual já existe no histórico
      if (!Firebase.getBool("Historico/" + dataAtualFixa + "/existe")) {
        // Adiciona a nova data ao histórico
        Firebase.setBool("Historico/" + dataAtualFixa + "/existe", true);
      }
    }

    // Adicionando registro ao histórico usando a data atual fixa
    Firebase.setString("Historico/" + dataAtualFixa + "/" + nomeAluno, nomeRA);
                digitalWrite(4,0);

       display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 20);
      String hor = String(horario);

display.print("O aluno "+nomeAluno + "foi registrado as: "+hor);
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.display();
                digitalWrite(2,1);
delay(1000);
                digitalWrite(2,0);

  }

}

void printStoredFingerprintsCount() {
  fingerprintSensor.getTemplateCount();
  
  Serial.print(F("Digitais cadastradas: "));
  Serial.println(fingerprintSensor.templateCount);
}
/////////////////////////////
////////////////////////////
////////////////////////////
void deleteFingerprint() {
  Serial.println(F("Qual a posição para apagar a digital? (1 a 149)"));
  //String strLocation = getCommand();
  int location = Firebase.getInt("/ponto_geral/apagar");

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 30);
display.print("O sistema entrou no modo de apagar digital.!");
display.display();
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.setTextSize(1);
display.setCursor(0, 40);
display.print("Aguarde um momento!");
digitalWrite(4,1);
display.display();

  if (location < 1 || location > 149) {
    Serial.println(F("Posição inválida"));
            digitalWrite(23,1);
    return;
        digitalWrite(23,0);
  }
  if (fingerprintSensor.deleteModel(location) != FINGERPRINT_OK) {
    Serial.println(F("Erro ao apagar digital"));
        digitalWrite(23,1);
                Firebase.setString("ponto_geral/chaveT", "ler");
                    digitalWrite(23,1);


  }
  else {
            Firebase.setString("ponto_geral/chaveT", "ler");
    Serial.println(F("Digital apagada com sucesso!!!"));
    digitalWrite(4,0);
     tirar_digital();
     delay(1000);
  }
}

void emptyDatabase() {
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
display.setTextSize(1);
display.setCursor(0, 30);
display.print("LIMPANDO BANCO DE DADOS.!");
display.display();
display.setCursor(10, 0);
display.print("JOSE VASQUES");
display.setTextSize(1);
display.setCursor(0, 40);
display.print("Aguarde um momento!");
digitalWrite(4,1);
display.display();

  Serial.println(F("Tem certeza? (s/N)"));
  String command = "S";
command.toUpperCase();
  if (true) {
    Serial.println(F("Apagando banco de digitais..."));
    if (fingerprintSensor.emptyDatabase() != FINGERPRINT_OK) {
      Serial.println(F("Erro ao apagar banco de digitais"));
    }
    else {
              Firebase.setString("ponto_geral/chaveT", "ler");
      Serial.println(F("Banco de digitais apagado com sucesso!!!"));
         tirar_digital();
     delay(1000);
     digitalWrite(4,0);
    }
  }
  else {
    Serial.println(F("Cancelado"));
  }
}