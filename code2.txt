#include <Adafruit_Fingerprint.h>

// Senha padrão do sensor de digitais
const uint32_t password = 0x0;

// Objeto responsável por controlar o sensor de digitais
Adafruit_Fingerprint fingerprintSensor = Adafruit_Fingerprint(&Serial2, password);

// Variável para controlar o modo
bool registerMode = true;

// Variável para armazenar a posição a ser cadastrada
int fingerprintPosition = 1;

// Variável para controlar o movimento
String movimento = "ler"; // Inicialmente definida como "ler"

void setup()  
{
  Serial.begin(9600);
  setupFingerprintSensor();
}

void setupFingerprintSensor()
{
  fingerprintSensor.begin(57600);
  if(!fingerprintSensor.verifyPassword())
  {
    Serial.println(F("Não foi possível conectar ao sensor. Verifique a senha ou a conexão"));
    while(true);
  }
}

void loop()
{
  // Verifica se o modo de cadastro está ativado
  if (registerMode) {
    if (movimento == "ler") {
      checkFingerprint(); // Executa a função de verificação de digital
    } else if (movimento == "cadastrar") {
      storeFingerprint(fingerprintSensor, fingerprintPosition); // Executa a função de cadastro
    } else if (movimento == "deletar") {
      deleteFingerprint(1); // Executa a função de deletar digital
    }
    registerMode = false; // Volta para o modo de verificação após cadastrar
  } else {
    delay(500); // Pequeno atraso para evitar sobrecarga
  }

  // Chamada da função para apagar digital em um local específico (comentada)
  // deleteFingerprint(10); // Exemplo: apaga a digital na posição 10
}

// Função para ativar o modo de cadastro
void enterRegisterMode(int position, String op) {
  registerMode = true;
  fingerprintPosition = position; // Define a posição para armazenar a digital
  movimento = op; // Define o movimento a ser executado (ler, cadastrar ou deletar)
}

// Cadastro da digital
void storeFingerprint(Adafruit_Fingerprint & sensor, int location)
{
  Serial.println(F("Cadastrar digital"));

  Serial.println(F("Encoste o dedo no sensor"));

  // Loop até que a digital seja detectada
  while (true)
  {
    if (sensor.getImage() == FINGERPRINT_OK)
    {
      break; // Se a digital for detectada, saia do loop
    }
    delay(100); // Pequeno atraso entre as tentativas
  }

  // Converte a imagem para o padrão que será utilizado para armazenar no banco de digitais
  if (sensor.image2Tz(1) != FINGERPRINT_OK)
  {
    // Se chegou aqui deu erro, então abortamos os próximos passos
    Serial.println(F("Erro image2Tz 1"));
    return;
  }
  
  Serial.println(F("Tire o dedo do sensor"));

  delay(2000);

  // Espera até tirar o dedo
  while (sensor.getImage() != FINGERPRINT_NOFINGER);

  // Antes de guardar precisamos de outra imagem da mesma digital
  Serial.println(F("Encoste o mesmo dedo no sensor"));

  // Loop até que a digital seja detectada
  while (true)
  {
    if (sensor.getImage() == FINGERPRINT_OK)
    {
      break; // Se a digital for detectada, saia do loop
    }
    delay(100); // Pequeno atraso entre as tentativas
  }

  // Converte a imagem para o segundo padrão
  if(sensor.image2Tz(2) != FINGERPRINT_OK)
  {
    // Se chegou aqui deu erro, então abortamos os próximos passos
    Serial.println(F("Erro image2Tz 2"));
    return;
  }

  // Cria um modelo da digital a partir dos dois padrões
  if(sensor.createModel() != FINGERPRINT_OK)
  {
    // Se chegou aqui deu erro, então abortamos os próximos passos
    Serial.println(F("Erro createModel"));
    return;
  }

  // Guarda o modelo da digital no sensor
  if(sensor.storeModel(location) != FINGERPRINT_OK)
  {
    // Se chegou aqui deu erro, então abortamos os próximos passos
    Serial.println(F("Erro storeModel"));
    return;
  }

  // Se chegou aqui significa que todos os passos foram bem sucedidos
  Serial.println(F("Sucesso!!!"));
}

// Função para apagar uma digital em um local específico
void deleteFingerprint(int location)
{
  if(location < 1 || location > 149)
  {
    Serial.println(F("Posição inválida"));
    return;
  }

  if(fingerprintSensor.deleteModel(location) != FINGERPRINT_OK)
  {
    Serial.println(F("Erro ao apagar digital"));
  }
  else
  {
    Serial.println(F("Digital apagada com sucesso!!!"));
  }
}

// Função para verificar se a digital está cadastrada
void checkFingerprint()
{
  while(true){
  Serial.println(F("Encoste o dedo no sensor"));

  // Loop até que a digital seja detectada
  while (true)
  {
    if (fingerprintSensor.getImage() == FINGERPRINT_OK)
    {
      break; // Se a digital for detectada, saia do loop
    }
    delay(100); // Pequeno atraso entre as tentativas
  }

  // Converte a imagem para o padrão que será utilizado para verificar com o banco de digitais
  if (fingerprintSensor.image2Tz() != FINGERPRINT_OK)
  {
    // Se chegou aqui deu erro, então abortamos os próximos passos
    Serial.println(F("Erro image2Tz"));
    return;
  }

  // Procura por este padrão no banco de digitais
  if (fingerprintSensor.fingerFastSearch() != FINGERPRINT_OK)
  {
    // Se chegou aqui significa que a digital não foi encontrada
    Serial.println(F("Digital não encontrada"));
    
  }

  // Se chegou aqui a digital foi encontrada
  // Mostramos a posição onde a digital estava salva e a confiança
  // Quanto mais alta a confiança melhor
  Serial.print(F("Digital encontrada com confiança de "));
  Serial.print(fingerprintSensor.confidence);
  Serial.print(F(" na posição "));
  Serial.println(fingerprintSensor.fingerID);
}
}
